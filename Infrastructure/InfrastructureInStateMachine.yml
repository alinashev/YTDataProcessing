Parameters:
    BucketName:
        Type: String
        Description: S3 Bucket name

    S3EventQueueName:
        Description: SQS Queue name
        Type: String
        
    ChannelSenderLambdaFunctionName:
        Description: Lambda function name
        Type: String
        
    ChannelPullerLambdaFunctionName:
        Description: Lambda function name
        Type: String
        
    LambdaTriggerQueueName:
        Description: Lambda trigger queue name
        Type: String

    LambdaRoleName:
        Description: Lambda role name
        Type: String
        
    DatabaseName:
        Description: Database name
        Type: String

# IAM role for the Step Functions State Machine
Resources:
    StateMachineIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                      - Fn::Sub: "states.${AWS::Region}.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            -
              PolicyName: StatesExecutionPolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action: "lambda:InvokeFunction"
                    Resource:
                      - !GetAtt ChannelSenderLambdaFunction.Arn
                      - !GetAtt ChannelPullerLambdaFunction.Arn

    StateMachine:
        Type: AWS::StepFunctions::StateMachine
        Properties:
          StateMachineName: !Sub "${AWS::StackName}-StateMachine"
          RoleArn: !GetAtt StateMachineIAMRole.Arn
          DefinitionString: !Join
            - "\n"
            - - '{'
              - ' "StartAt": "ChannelSenderLambdaFunction",'
              - ' "States": {'
              - '   "ChannelSenderLambdaFunction": {'
              - '     "Type": "Task",'
              - !Sub '      "Resource": "${ChannelSenderLambdaFunction.Arn}",'
              - '     "Next": "LambdaTriggerQueue"'
              - '   },'
              - '    "LambdaTriggerQueue": {'
              - '     "Type": "Task",'
              - !Sub '      "Resource": "arn:aws:states:::sqs:sendMessage",'
              - '     "Parameters": {'
              - '        "MessageBody.$": "$",'
              - '        "QueueUrl": "$(LambdaTriggerQueue)"'
              - '        },'
              - '     "Next": "ChannelPullerLambdaFunction"'
              - '   },'
              - '    "ChannelPullerLambdaFunction": {'
              - '      "Type": "Task",'
              - !Sub '      "Resource": "${ChannelPullerLambdaFunction.Arn}",'
              - '     "End": true'
              - '   }'
              - ' }'
              - '}'

    ScheduledEventIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Principal:
                  Service:
                      - Fn::Sub: "events.amazonaws.com"
                Action:
                  - "sts:AssumeRole"
          Policies:
            -
              PolicyName: StateMachineExecutionPolicy
              PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  -
                    Effect: "Allow"
                    Action: "states:StartExecution"
                    Resource:
                      - !Ref StateMachine

    ScheduledEventRule:
        Type: "AWS::Events::Rule"
        Properties:
            State: ENABLED
            ScheduleExpression: rate(1 hour)
            Targets:
            - Arn:
                  Fn::GetAtt:
                  - StateMachine
                  - Arn
              Id: !GetAtt StateMachine.Name
              RoleArn: !GetAtt ScheduledEventIAMRole.Arn

    Role:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Ref LambdaRoleName
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                      - Effect: Allow
                        Principal:
                              Service:
                                - lambda.amazonaws.com
                        Action:
                            - 'sts:AssumeRole'
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonSQSFullAccess
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

    ChannelSenderLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Ref ChannelSenderLambdaFunctionName
            Code:
                S3Bucket: a-tech-bucket
                S3Key: Default/index.zip
            Environment:
                Variables:
                    LambdaTriggerQueueName: !Ref LambdaTriggerQueueName
            Handler: index.lambda_handler
            MemorySize: 128
            Role: !GetAtt Role.Arn
            Runtime: python3.9
            Timeout: 60

    ChannelPullerLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Ref ChannelPullerLambdaFunctionName
            Handler: index.lambda_handler
            Role: !GetAtt Role.Arn
            Code:
                S3Bucket: a-tech-bucket
                S3Key: Default/index.zip
            Environment:
                Variables:
                    BucketName: !Ref BucketName
            Timeout: 60
            MemorySize: 128
            Runtime: python3.9
            Layers:
                - !Ref Layer

    TransformerLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: a-transform-01
            Handler: index.lambda_handler
            Role: !GetAtt Role.Arn
            Code:
                S3Bucket: a-tech-bucket
                S3Key: Default/index.zip
            Environment:
                Variables:
                    BucketName: !Ref BucketName
                    LambdaTransformerTriggerQueue: !Ref LambdaTransformerTriggerQueueName
                    DatabaseName: !Ref DatabaseName
            Timeout: 120
            MemorySize: 128
            Runtime: python3.9
            Layers:
                - !Ref Layer

    Layer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            LayerName: google-api-python-client
            Content:
                S3Bucket: a-tech-bucket
                S3Key: Layers/python.zip
            CompatibleArchitectures:
                - x86_64
            CompatibleRuntimes:
                - python3.9
                - python3.8
                - python3.7
                - python3.6
    S3Bucket:
        Type: AWS::S3::Bucket
        DependsOn:
              - S3EventQueue
              - QueuePolicy
        Properties:
                  BucketName: !Ref BucketName
                  NotificationConfiguration:
                        QueueConfigurations:
                        - Event: 's3:ObjectCreated:Put'
                          Queue: !Join [ ":", [ "arn:aws:sqs", !Ref "AWS::Region" , !Ref "AWS::AccountId", !Ref S3EventQueueName ] ]
    QueuePolicy:
        Type: AWS::SQS::QueuePolicy
        DependsOn: S3EventQueue
        Properties:
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          AWS: '*'
                      Action:
                          - SQS:SendMessage
                      Resource: !Join [ ":", [ "arn:aws:sqs", !Ref "AWS::Region" , !Ref "AWS::AccountId", !Ref S3EventQueueName ] ]
                      Condition:
                          ArnLike:
                            aws:SourceArn: !Join [ "", ["arn:aws:s3:*:*:", !Ref BucketName ] ]
            Queues:
                - !Ref S3EventQueue

    S3EventQueue:
        Type: AWS::SQS::Queue
        Properties:
            DelaySeconds: 0
            MaximumMessageSize: 262144
            MessageRetentionPeriod: 864000
            QueueName: !Ref S3EventQueueName
            ReceiveMessageWaitTimeSeconds: 0
            VisibilityTimeout: 60

    LambdaFunctionEventSourceMapping:
        Type: AWS::Lambda::EventSourceMapping
        Properties:
            BatchSize: 1
            Enabled: true
            EventSourceArn: !GetAtt LambdaTriggerQueue.Arn
            FunctionName: !GetAtt ChannelPullerLambdaFunction.Arn

    LambdaFunctionTransformerEventSourceMapping:
        Type: AWS::Lambda::EventSourceMapping
        Properties:
            BatchSize: 1
            Enabled: true
            EventSourceArn: !GetAtt TransformerTriggerQueue.Arn
            FunctionName: !GetAtt TransformerLambdaFunction.Arn

    LambdaTriggerQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Ref LambdaTriggerQueueName
            DelaySeconds: 0
            VisibilityTimeout: 60

    TransformerTriggerQueue:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: a-transform-queue
            DelaySeconds: 0
            VisibilityTimeout: 120

    MyAthenaDataBase:
        Type: AWS::Glue::Database
        Properties:
            CatalogId: !Ref "AWS::AccountId" 
            DatabaseInput: 
                Name: !Ref DatabaseName
    